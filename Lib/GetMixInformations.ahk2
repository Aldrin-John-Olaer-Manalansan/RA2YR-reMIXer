Files_Count := NumGet(MixFileObj, 0x4,"UShort")

Area_Info_Offset := 0xA
Area_Info_Ptr := MixFileObj.Ptr + Area_Info_Offset
Area_Info_Size := (Files_Count * 12)
Area_Body_Offset := Area_Info_Size + Area_Info_Offset
Area_Body_Size := MixFileObj.Size - Area_Body_Offset
Area_Body_Ptr := MixFileObj.Ptr+Area_Body_Offset

	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Get all Possible LDM_Addresss of the LMD File within the file
LMDFile_OffsetfromBody := []
Seeker := MixFileObj.Ptr+Area_Body_Offset
Seeker_RemainingBytes := Area_Body_Size
UIntBuffer := Buffer(4)
LMD_Header_Pattern := Buffer(32)
NumPut("UInt", 0x20434358,
       "UInt", 0x4F207962,
       "UInt", 0x2066616C,
       "UInt", 0x206E6176,
       "UInt", 0x20726564,
       "UInt", 0x6B657053,
       "UInt", 0x2717041A,
       "UInt", 0x00801910,
       LMD_Header_Pattern)

LMDMap := Map()
while (FoundPtr := InBin(Seeker, Seeker_RemainingBytes, LMD_Header_Pattern.Ptr, 32))
{
	File_Size := NumGet(FoundPtr+32, "UInt")
	File_StartingOffsetfromBody := FoundPtr-Area_Body_Ptr
	File_EndingOffsetfromBody := File_StartingOffsetfromBody+File_Size
	if (File_Size > 0) and (Area_Body_Size >= File_EndingOffsetfromBody) ; valid info / not corrupted
	{
		File_Ptr := Area_Body_Ptr + File_StartingOffsetfromBody + 52 ; pointer to start of the name dictionary list
		; msgbox Format("{:X}",File_Ptr)
		RemainingSize := File_Size - 52
		while (RemainingSize > 0)
		{
			Name := StrGet(File_Ptr, RemainingSize, "UTF-8")
			NameSize := StrLen(Name)
			CRC32 := StrUpper(Name)
			
			; RA2 Unique step before doing CRC32
			if (NameSize & 3)
			{
				Mask := NameSize & ~3
				CRC32 .= Chr(NameSize - Mask)
				AppendChar := SubStr(CRC32,Mask + 1,1)
				Loop 3 - (NameSize & 3)
					CRC32 .= AppendChar
			}
			
			CRC32 := StringToCRC32(CRC32)
			
			NumPut("UInt", CRC32, UIntBuffer)
			if (MatchedPtr := InBin(Area_Info_Ptr, Area_Info_Size, UIntBuffer, 4))
			{
				if !Mod(Area_Info_Ptr - MatchedPtr, 12) ; if its the ID offset
					LMDMap[CRC32] := Name
			}

			NameSize++
			RemainingSize -= NameSize
			File_Ptr += NameSize
		}
		
		LMDFile_OffsetfromBody.Push(File_StartingOffsetfromBody)
	}
	FoundPtr++
	Seeker_RemainingBytes -= FoundPtr-Seeker
	Seeker := FoundPtr
}
Gui_ControlPanel_Progress.Value++
	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~

	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Scan Info Area for possible field containing the LMD Information registration
	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~

	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Scan Info Area for possible field containing the LMD Information registration
LMDLookup := []
InvalidInfo_Index := []
Area_Info_ValidFieldsCount := 0
Seeker := Area_Info_Ptr
Loop Files_Count
{
	File_ID := NumGet(Seeker+0, "UInt")
	Seeker += 0x4
	File_StartingOffsetfromBody := NumGet(Seeker+0, "UInt")
	Seeker += 0x4
	File_Size := NumGet(Seeker+0, "UInt")
	Seeker += 0x4
	File_EndingOffsetfromBody := File_StartingOffsetfromBody+File_Size
	if ((File_Size == 0) or (Area_Body_Size < File_EndingOffsetfromBody)) ; corrupted/invalid info
	{
		if (File_ID == 0x366E051F) ; was an LMD Info
			LMDLookup.Push({Index: A_Index-1, isHealthy: False})
		else InvalidInfo_Index.Push(A_Index-1)
	}
	else if (File_ID == 0x366E051F) ; was an LMD Info
	{
		LMDLookup.Push({Index: A_Index-1,
			isHealthy: InBin(Area_Body_Ptr + File_StartingOffsetfromBody, 32, LMD_Header_Pattern.Ptr, 32) ; check if this info field is pointing onto a valid LMD File
		})
	}
	else Area_Info_ValidFieldsCount++
}
Gui_ControlPanel_Progress.Value++
	;~~~~~~~~~~~~~~~~~~~~~~~~~~~

	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage 1: Create LookUpTable
Seeker := MixFileObj.Ptr + Area_Info_Offset
LookUpTable := Map()
LookUpTable.Capacity := Files_Count
Loop Files_Count
{
	File_ID := NumGet(Seeker+0, "UInt")
	Seeker += 4
	File_StartingOffsetfromBody := NumGet(Seeker+0, "UInt")
	Seeker += 4
	File_Size := NumGet(Seeker+0, "UInt")
	Seeker += 4
	if (File_ID != 0x366E051F) ; Ignore LMD Files
	{
		File_EndingOffsetfromBody := File_StartingOffsetfromBody+File_Size
		if ((File_Size != 0) and (Area_Body_Size >= File_EndingOffsetfromBody)) ; valid info / not corrupted
			LookUpTable[A_Index-1] := {ID: File_ID, OffsetfromBody: File_StartingOffsetfromBody, Size: File_Size}
	}
}
Gui_ControlPanel_Progress.Value++
	; ~~~~~~~~~~~~~~~~~~~~~~~~~~~

/*
	Validate LookUpTable by Eliminating Garbage Informations:
	Case 1: one or more indexes have all their informations equal to each other. (ask user for help)
	Case 2: an index acting like a container was detected with one or more indexes inside it. (ask user for help)
	Case 3: an index overlaps with one or more indexes. (auto eliminate some garbage then ask user for help)
*/
if (LookUpTable.Count >= 2)
{
		; ~~~~~~~~~~~~~~~~~~~~~~~~~~~ Stage 2: Detect File Conflicts and count how much files did the suspected garbage file Overlapped to.
	DuplicateList := []
	ContainerMap := Map()
	OverlapMap := Map()

		; we use our mcode from native c language to analyze conflicts because AHK execution time is so slow.
	LookUpTable_Count := LookUpTable.Count
	LookUpTable_Buffer := Buffer(LookUpTable_Count * 10)
	Seeker := LookUpTable_Buffer.Ptr
	For Key in LookUpTable
	{
		NumPut("UInt"  , LookUpTable[Key].OffsetfromBody,
				"UInt"  , LookUpTable[Key].OffsetfromBody+LookUpTable[Key].Size,
				"UShort", Key,
				Seeker)
		Seeker += 10
	}
	LookUpTable_API := Buffer(6 + A_PtrSize)
	NumPut("UShort", 0,
			"UShort", 0,
			"UShort", LookUpTable.Count,
			"Ptr"	, LookUpTable_Buffer.Ptr,
			LookUpTable_API)
		;
	while Result := DllCall(FileConflictChecker,"Ptr",LookUpTable_API.Ptr,"CDecl UChar")
	{
		Index1 := NumGet(LookUpTable_API, "UShort")
		Index2 := NumGet(LookUpTable_API, 2, "UShort")
		Key1 := NumGet(LookUpTable_Buffer, (Index1 * 10) + 8, "UShort")
		Key2 := NumGet(LookUpTable_Buffer, (Index2 * 10) + 8, "UShort")
		if LookUpTable.Has(Key1) and LookUpTable.Has(Key2) ; conflict confusion still exists
		{
			if LMDMap.Has(LookUpTable[Key1].ID) and !LMDMap.Has(LookUpTable[Key2].ID)
				LookUpTable.Delete(Key2) ; Key1 is registered in our LMD while Key2 is unregistered means that Key2 is automatically garbage
			else if !LMDMap.Has(LookUpTable[Key1].ID) and LMDMap.Has(LookUpTable[Key2].ID)
				LookUpTable.Delete(Key1) ; Key2 is registered in our LMD while Key1 is unregistered means that Key1 is automatically garbage
			else switch Result
			{
			case 1: ; Index1's information is a duplicate of Index2
				AppendNew := True
				Loop DuplicateList.Length
				{
					if DuplicateList[A_Index].Has(Key2)
					{
						AppendNew := False
						break
					}
					else if DuplicateList[A_Index].Has(Key1)
					{
						DuplicateList[A_Index][Key2] := True
						AppendNew := False
						break
					}
				}
				if AppendNew
					DuplicateList.Push(Map(Key1,True, Key2, True))
			case 2: ; Index1 contains Index2
				if ContainerMap.Has(Key1)
				{
					if !ContainerMap[Key1].Has(Key2)
						ContainerMap[Key1][Key2] := True
				}
				else ContainerMap[Key1] := Map(Key2, True)
			case 3: ; Index2 contains Index1
				if ContainerMap.Has(Key2)
				{
					if !ContainerMap[Key2].Has(Key1)
						ContainerMap[Key2][Key1] := True
				}
				else ContainerMap[Key2] := Map(Key1, True)
			case 4: ; Index1 overlaps Index2
				if OverlapMap.Has(Key1)
					OverlapMap[Key1][Key2] := True
				else OverlapMap[Key1] := Map(Key2, True)
				if OverlapMap.Has(Key2)
					OverlapMap[Key2][Key1] := True
				else OverlapMap[Key2] := Map(Key1, True)
			default:
				msgbox "INVALID CASE RESULT '" . Result . "' FOR CONFLICT DETECTION`n`nimmediately inform the developer of this tool"
			}
		}
	}
		; ~~~~~~~~~~~~~~~~~~~~~~~~~~~
}
Gui_ControlPanel_Progress.Value++